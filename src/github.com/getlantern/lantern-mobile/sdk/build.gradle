apply plugin: 'android-sdk-manager'
apply plugin: 'android-library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'org.getlantern'
version = '1.2-SNAPSHOT'

project.ext {
    groupId = 'org.getlantern'
    artifactId = 'sdk'
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

buildscript {
    repositories {
        flatDir {
            dirs 'libs'
        }  
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.10'
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.+'
    }
}    

repositories {
    flatDir {
        dirs 'libs'
    }  
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://plugins.gradle.org/m2/' }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}
    

android {

    useLibrary 'org.apache.http.legacy'

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-rules.pro'
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
                jniLibs.srcDirs = ['libs/jni']
            }
            resources {
                srcDir 'libs/jni'
            }
        }
    }


    buildTypes {
        release {
            buildConfigField "String", "GROUP", "\"${pom_group_id}\""
            buildConfigField "String", "ARTIFACT_ID", "\"${pom_artifact_id}\""
            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled false
        }
    }

    lintOptions {
        warningsAsErrors false
        abortOnError false
    }

    defaultPublishConfig 'release'
    publishNonDefault false

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

uploadArchives {
    configuration = configurations.archives
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Lantern SDK'
                packaging 'aar'
                description 'Android library for the Lantern circumvention tool'
                url 'https://github.com/getlantern/lantern'
                scm {
                    url 'scm:git@github.com:getlantern/lantern.git'
                    connection 'scm:git@github.com:getlantern/lantern.git'
                    developerConnection 'scm:git@github.com:getlantern/lantern.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'atavism'
                        name 'atavism'
                    }
                }
            }

            pom.groupId = 'org.getlantern'
            pom.artifactId = 'android-sdk'
            pom.version = version
        }
    }
}

dependencies {
    compile fileTree(include: ['*.so', '*.jar'], dir: 'libs')
    compile group: 'commons-io', name: 'commons-io', version: '2.0.1'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.10'
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'com.google.android.gms:play-services-analytics:7.0.0'
}  
 

publishing {
    publications {
        // Create different publications for every build types (debug and release)
        android.buildTypes.all { variant ->
            // Dynamically creating publications name
            "${variant.name}Aar"(MavenPublication) {

                def manifest = new XmlSlurper().parse(project.android.sourceSets.main.manifest.srcFile);
                def libVersion = manifest['@android:versionName'].text()
                def artifactName = project.getName()

                // Artifact properties
                groupId group
                version = libVersion == '' ? version : libVersion
                artifactId variant.name == 'debug' ? artifactName + '-dev' : artifactName

                // Tell maven to prepare the generated "*.aar" file for publishing
                artifact("$buildDir/outputs/aar/${project.getName()}-${variant.name}.aar")

                pom.withXml {
                    //Creating additional node for dependencies
                    def dependenciesNode = asNode().appendNode('dependencies')

                    //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                    def configurationNames = ["${variant.name}Compile", 'compile']

                    configurationNames.each { configurationName ->
                        configurations[configurationName].allDependencies.each {
                            if (it.group != null && it.name != null) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)

                                //If there are any exclusions in dependency
                                if (it.excludeRules.size() > 0) {
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    it.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group)
                                        exclusionNode.appendNode('artifactId', rule.module)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}     

signing {
    sign configurations.archives
}
